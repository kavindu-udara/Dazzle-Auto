/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views.shop.items;

import com.formdev.flatlaf.FlatClientProperties;
import controllers.ProductBrandController;
import controllers.ProductController;
import includes.LoggerConfig;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import models.ProductModel;
import views.shop.grn.shop_GRNJPanel;

/**
 *
 * @author mypc
 */
public class SelectItems extends javax.swing.JDialog {

    private shop_GRNJPanel shop_grnpanel;


    private static Logger logger = LoggerConfig.getLogger();

    /**
     * Creates new form SelectItems
     */
    public SelectItems(java.awt.Frame parent, boolean modal, shop_GRNJPanel shop_grnpanel) {
        super(parent, modal);
        initComponents();
        ItemsTableRender();
        loadItems();
        loadBrands();
        this.shop_grnpanel = shop_grnpanel;

        search_box.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Enter Item Name or Id ");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        search_box = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Brand_chooser = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Items_View_Table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Items");

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel1.setText("Search Items");

        search_box.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        search_box.setFocusCycleRoot(true);
        search_box.setSelectionColor(new java.awt.Color(214, 132, 13));
        search_box.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_boxKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jLabel2.setText("Sort By Brand");

        Brand_chooser.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        Brand_chooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Brand_chooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Brand_chooserItemStateChanged(evt);
            }
        });
        Brand_chooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Brand_chooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(search_box, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(Brand_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(526, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(search_box, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(Brand_chooser))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        Items_View_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Id", "Item Name", "Brand Id", "Brand Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Items_View_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Items_View_TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Items_View_Table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fetchItems(String searchText) throws Exception {
        DefaultTableModel model = (DefaultTableModel) Items_View_Table.getModel();
        model.setRowCount(0);

        try {
            ResultSet resultSet = new ProductController().searchProductId(searchText);
            ResultSet resultSet1 = new ProductBrandController().search("");

            HashMap<Integer, String> BrandMap = new HashMap<>();

            while (resultSet1.next()) {
                int BrandId = resultSet1.getInt("id");
                String BrandName = resultSet1.getString("name");
                BrandMap.put(BrandId, BrandName);
            }

            while (resultSet.next()) {
                String id = resultSet.getString("id");
                String name = resultSet.getString("name");
                int BrandId = resultSet.getInt("brand_id");

                String BrandName = BrandMap.getOrDefault(BrandId, "Unknown Brand");

                model.addRow(new Object[]{id, name, BrandId, BrandName});
            }

        } catch (Exception ex) {
            ex.printStackTrace();

            logger.severe("Error while searching Items in Select Items : " + ex.getMessage());

        }
    }

    public void reloadTable() {
        loadItems();
    }

    private void fetchBrands(String searchText) throws Exception {
        DefaultTableModel model = (DefaultTableModel) Items_View_Table.getModel();
        model.setRowCount(0);

        try {
            ResultSet resultSet = new ProductController().searchBrand(searchText);;
            ResultSet resultSet1 = new ProductBrandController().search("");

            HashMap<Integer, String> BrandMap = new HashMap<>();

            while (resultSet1.next()) {
                int BrandId = resultSet1.getInt("id");
                String BrandName = resultSet1.getString("name");
                BrandMap.put(BrandId, BrandName);
            }

            while (resultSet.next()) {
                String id = resultSet.getString("id");
                String name = resultSet.getString("name");
                int BrandId = resultSet.getInt("brand_id");

                String BrandName = BrandMap.getOrDefault(BrandId, "Unknown Brand");

                model.addRow(new Object[]{id, name, BrandId, BrandName});
            }

        } catch (Exception ex) {
            ex.printStackTrace();

            logger.severe("Error while searching Items in Select Items : " + ex.getMessage());

        }

    }

    private void loadItems() {
        try {

            ResultSet ItemResultSet = new ProductController().show();
            ResultSet BrandResultSet = new ProductBrandController().show();

            HashMap<Integer, String> BrandMap = new HashMap<>();

            while (BrandResultSet.next()) {
                int BrandId = BrandResultSet.getInt("id");
                String BrandName = BrandResultSet.getString("name");
                BrandMap.put(BrandId, BrandName);
            }

            DefaultTableModel model = (DefaultTableModel) Items_View_Table.getModel();
            model.setRowCount(0);

            while (ItemResultSet.next()) {
                Vector<String> vector = new Vector<>();

                String employeeId = ItemResultSet.getString("id");
                vector.add(employeeId);
                vector.add(ItemResultSet.getString("name"));

                vector.add(ItemResultSet.getString("brand_id"));

                int BrandId = ItemResultSet.getInt("brand_id");

                String BrandName = BrandMap.getOrDefault(BrandId, "Unknown Employee Type");

                vector.add(BrandName);

                model.addRow(vector);
            }

        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loding items to table in select Items : " + e.getMessage());

        }

    }

    private static HashMap<String, String> BrandMap = new HashMap<>();

//load brands to sort button
    private void loadBrands() {

        try {
            ResultSet resultSet = new ProductBrandController().show();

            Vector<String> vector = new Vector<>();
            vector.add("Select");

            while (resultSet.next()) {
                vector.add(resultSet.getString("name"));
                BrandMap.put(resultSet.getString("name"), resultSet.getString("id"));
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(vector);
            Brand_chooser.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loding brands to sort button in select Items : " + e.getMessage());

        }
    }

    private void search_boxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_boxKeyReleased
        // TODO add your handling code here:
        try {
            fetchItems(search_box.getText().toString());
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.severe("Error while search Items in select Items : " + ex.getMessage());

        }
    }//GEN-LAST:event_search_boxKeyReleased

    private void Brand_chooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Brand_chooserItemStateChanged
        // TODO add your handling code here:
        try {
            fetchBrands(Brand_chooser.getSelectedItem().toString());
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.severe("Error while sorting brands in select Items : " + ex.getMessage());

        }

    }//GEN-LAST:event_Brand_chooserItemStateChanged

    private void Brand_chooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Brand_chooserActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_Brand_chooserActionPerformed

    public void ItemsTableRender() {

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        JTableHeader tableHeader = Items_View_Table.getTableHeader();

        tableHeader.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Font headerFont = new Font("Verdana", Font.BOLD, 14);
                label.setBorder(BorderFactory.createEmptyBorder()); // Remove header borders
                label.setFont(headerFont);
                label.setBackground(new Color(5, 15, 76)); // Optional: Set header background color
                label.setForeground(Color.WHITE); // Optional: Set header text color
                label.setHorizontalAlignment(SwingConstants.CENTER); // Center the text
                return label;
            }
        });

        tableHeader.setPreferredSize(new Dimension(tableHeader.getPreferredSize().width, 30));

        for (int i = 0; i < 4; i++) {
            Items_View_Table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    private void Items_View_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Items_View_TableMouseClicked
        // TODO add your handling code here:
        int row = Items_View_Table.getSelectedRow();

        if (evt.getClickCount() == 2 && row != -1) {

            String ItemId = String.valueOf(Items_View_Table.getValueAt(row, 0));
            String ItemName = String.valueOf(Items_View_Table.getValueAt(row, 1));
            String BrandName = String.valueOf(Items_View_Table.getValueAt(row, 3));

            ProductModel ItemModel = new ProductModel();
            ItemModel.setItemId(ItemId);
            ItemModel.setName(ItemName);
            ItemModel.setbrandName(BrandName);

            shop_grnpanel.setSelectedProduct(ItemModel);
     
            this.dispose();
        }
        

    }//GEN-LAST:event_Items_View_TableMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SelectItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SelectItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SelectItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SelectItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                SelectItems dialog = new SelectItems(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Brand_chooser;
    private javax.swing.JTable Items_View_Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField search_box;
    // End of variables declaration//GEN-END:variables
}
