/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views.financeAndHr;

import controllers.AttendanceDateController;
import controllers.AttendanceStatusController;
import controllers.EmployeeAttendanceController;
import controllers.EmployeeController;
import includes.LoggerConfig;
import includes.TimestampsGenerator;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import models.AttendanceDateModel;

/**
 *
 * @author USER
 */
public class EmployeeAttendance extends javax.swing.JPanel {

    private static final Logger logger = LoggerConfig.getLogger();

    private String todayDate = TimestampsGenerator.getTodayDate();

    private static HashMap<String, String> attendanceStatusMap = new HashMap<>();

    private int todayDateId;

    /**
     * Creates new form EmployeeAttendance
     */
    public EmployeeAttendance() {
        initComponents();
        getAttendanceStatusResultSet();
        AttendanceTableRender();
        todayDateLabel.setText(todayDate);
        isRowsCreted();
        if (todayDateId != 0) {
            loadTableData();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        attendanceTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        todayDateLabel = new javax.swing.JLabel();
        Date = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        checkOutButton = new javax.swing.JButton();
        checkInButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1089, 579));
        setPreferredSize(new java.awt.Dimension(1089, 579));

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        attendanceTable.setFont(new java.awt.Font("Roboto", 1, 15)); // NOI18N
        attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID ", "Name", "Check In", "Check Out", "Status", "Working Hrs"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        attendanceTable.setRowHeight(30);
        attendanceTable.getTableHeader().setReorderingAllowed(false);
        attendanceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attendanceTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(attendanceTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 101, 1042, 458));

        jButton4.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 102, 0));
        jButton4.setText("SCHEDULE");
        jButton4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 0), 1, true));
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(919, 32, 140, 42));

        todayDateLabel.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        todayDateLabel.setForeground(new java.awt.Color(242, 153, 5));
        todayDateLabel.setText("Today Date");
        jPanel1.add(todayDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(801, 40, -1, -1));

        Date.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        Date.setText("Today :");
        jPanel1.add(Date, new org.netbeans.lib.awtextra.AbsoluteConstraints(736, 40, -1, -1));

        jButton1.setBackground(new java.awt.Color(229, 229, 229));
        jButton1.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jButton1.setText("MARK MANUALLY ");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        checkOutButton.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        checkOutButton.setForeground(new java.awt.Color(33, 43, 108));
        checkOutButton.setText("CHECK OUT");
        checkOutButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(33, 43, 108)));
        checkOutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        checkInButton.setBackground(new java.awt.Color(33, 43, 108));
        checkInButton.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        checkInButton.setForeground(new java.awt.Color(255, 255, 255));
        checkInButton.setText("CHECK IN");
        checkInButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(checkInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jButton1)
                .addContainerGap(600, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1090, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void AttendanceTableRender() {

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        JTableHeader tableHeader = attendanceTable.getTableHeader();

        tableHeader.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Font headerFont = new Font("Verdana", Font.BOLD, 14);
                label.setBorder(BorderFactory.createEmptyBorder()); // Remove header borders
                label.setFont(headerFont);
                label.setBackground(new Color(33, 43, 108)); // Optional: Set header background color
                label.setForeground(Color.WHITE); // Optional: Set header text color
                label.setHorizontalAlignment(SwingConstants.CENTER); // Center the text
                return label;
            }
        });

        tableHeader.setPreferredSize(new Dimension(tableHeader.getPreferredSize().width, 30));

        for (int i = 0; i < 4; i++) {
            attendanceTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }
    private void attendanceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendanceTableMouseClicked

        //
    }//GEN-LAST:event_attendanceTableMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        // check is tables rows already created or not
        if (!isRowsCreted()) {
            createRows();
        } else {
            JOptionPane.showMessageDialog(null, "Attendance already created ! ");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void checkInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInButtonActionPerformed
        // CHECKIN
        new MarkAttendance(null, true, "checkin", () -> {
            loadTableData();
        }).setVisible(true);
    }//GEN-LAST:event_checkInButtonActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        // CHECKOUT
        new MarkAttendance(null, true, "checkout", () -> {
            loadTableData();
        }).setVisible(true);
    }//GEN-LAST:event_checkOutButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new EmployeeSelectorDialog(null, true, null, "manual attendance", () -> {
            loadTableData();
        }).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadTableData() {
        DefaultTableModel model = (DefaultTableModel) attendanceTable.getModel();
        model.setRowCount(0);
        try {
            ResultSet attendanceResultSet = new EmployeeAttendanceController().showByDateId(todayDateId);
            while (attendanceResultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(attendanceResultSet.getString("employee_id"));
                try {
                    ResultSet employeeResultSet = new EmployeeController().show(attendanceResultSet.getString("employee_id"));
                    if (employeeResultSet.next()) {
                        vector.add(employeeResultSet.getString("first_name") + " " + employeeResultSet.getString("last_name"));
                    } else {
                        vector.add("");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    logger.severe("Error while showing employee  : " + ex.getMessage());
                }
                vector.add(attendanceResultSet.getString("checkin"));
                vector.add(attendanceResultSet.getString("checkout"));

                // status
                try {
                    ResultSet statusResultSet = new AttendanceStatusController().show(attendanceResultSet.getInt("attendance_status_id"));
                    if (statusResultSet.next()) {
                        vector.add(statusResultSet.getString("status"));
                    } else {
                        vector.add("");
                    }
                } catch (Exception ex2) {
                    ex2.printStackTrace();
                    logger.severe("Error while showing status  : " + ex2.getMessage());
                }

                if (attendanceResultSet.getString("checkin") != null && attendanceResultSet.getString("checkout") != null) {
                    int workingHrs = Integer.parseInt(attendanceResultSet.getString("checkout").split(":")[0]) - Integer.parseInt(attendanceResultSet.getString("checkin").split(":")[0]);
                    vector.add(String.valueOf(workingHrs));
                } else {
                    vector.add("");
                }

                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loading table Data : " + e.getMessage());
        }
    }

    private boolean isRowsCreted() {
        try {
            ResultSet resultSet = new AttendanceDateController().show(todayDate);
            if (resultSet.next()) {
                this.todayDateId = resultSet.getInt("id");
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while showing attendanceDate resultSet : " + e.getMessage());
        }
        return false;
    }

    private ResultSet getEmployeesResultSet() throws Exception {
        return new EmployeeController().show();
    }

    private void getAttendanceStatusResultSet() {
        ResultSet resultSet = null;
        try {
            resultSet = new AttendanceStatusController().show();
            while (resultSet.next()) {
                attendanceStatusMap.put(resultSet.getString("status"), resultSet.getString("id"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while showing attendance status : " + e.getMessage());
        }
    }

    private ResultSet storeDate() throws Exception {
        AttendanceDateModel attendanceDateModel = new AttendanceDateModel();
        attendanceDateModel.setDate(todayDate);
        return new AttendanceDateController().store(attendanceDateModel);
    }

    private void createRows() {

        String dateId = "";
        try {
            ResultSet storeDateResultSet = storeDate();
            if (storeDateResultSet.next()) {
                dateId = storeDateResultSet.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while storing attendance date : " + e.getMessage());
        }

        if (dateId != "") {

            ResultSet employeeResultSet = null;
            try {
                employeeResultSet = getEmployeesResultSet();
            } catch (Exception e) {
                e.printStackTrace();
                logger.severe("Error while getting employee result set : " + e.getMessage());
            }

            if (employeeResultSet != null) {
                try {
                    while (employeeResultSet.next()) {
                        models.EmployeeAttendance employeeAttendanceModel = new models.EmployeeAttendance();
                        employeeAttendanceModel.setEmployeeId(employeeResultSet.getString("id"));
                        employeeAttendanceModel.setAttendanceDateId(Integer.parseInt(dateId));
                        employeeAttendanceModel.setAttendanceStatusId(Integer.parseInt(attendanceStatusMap.get("Absent")));

                        new EmployeeAttendanceController().storeWithNulls(employeeAttendanceModel);
                    }

                    isRowsCreted();
                    loadTableData();
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.severe("Error while storing employee : " + e.getMessage());
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Date;
    private javax.swing.JTable attendanceTable;
    private javax.swing.JButton checkInButton;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel todayDateLabel;
    // End of variables declaration//GEN-END:variables
}
