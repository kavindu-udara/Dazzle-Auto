/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views.financeAndHr;

import controllers.AttendanceDateController;
import controllers.EmployeeAttendanceController;
import controllers.EmployeeController;
import controllers.EmployeeSalaryController;
import controllers.EmployeeTypeController;
import includes.LoggerConfig;
import includes.OnlyDoubleDocumentFilter;
import includes.OnlyNumbersDocumentFilter;
import includes.TimestampsGenerator;
import javax.swing.table.DefaultTableModel;

import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.text.AbstractDocument;
import models.SalaryModel;

/**
 *
 * @author kavindu
 */
public class EmployeeSalaryPanel extends javax.swing.JPanel {

    private static final HashMap<String, String> monthHashMap = new HashMap<>();
    private static final Logger logger = LoggerConfig.getLogger();

    private EmployeeSalaryPanel employeeSalaryPanel = this;

    /**
     * Creates new form EmployeeSalaryPanel
     */
    public EmployeeSalaryPanel() {
        initComponents();
        setDocumentFilters();
        loadMonthsComboBox();
        loadSalaryTable();
    }

    private void setDocumentFilters() {
        ((AbstractDocument) precentageField.getDocument()).setDocumentFilter(new OnlyDoubleDocumentFilter());
        ((AbstractDocument) bonusField.getDocument()).setDocumentFilter(new OnlyDoubleDocumentFilter());
    }

    private void loadMonthsComboBox() {
        int monthNumber = Integer.parseInt(TimestampsGenerator.getTodayDate().split("-")[1]);
        String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        Vector vector = new Vector();
        for (int i = 0; i < months.length; i++) {
            monthHashMap.put(months[i], String.valueOf(i + 1));
            if (monthNumber == i + 1) {
                vector.add(months[i]);
            }
        }
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel(vector);
        monthsComboBox.setModel(comboBoxModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        monthsComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        employeeIdLabel = new javax.swing.JLabel();
        employeeNameLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        leavesCountValueLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        precentageField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        basicSalaryField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        leavesPriceField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        totalPriceField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        salaryTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        bonusField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        allowedLeavesCountLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Select a month : ");

        monthsComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthsComboBoxMouseClicked(evt);
            }
        });
        monthsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Employee Id");

        jLabel3.setText("Employee name");

        employeeIdLabel.setText("ID value label");

        employeeNameLabel.setText("Name value label");

        jLabel6.setText("Leaves Count : ");

        leavesCountValueLabel.setText("0");

        jLabel8.setText("Precentage");

        precentageField.setText("0");
        precentageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                precentageFieldKeyReleased(evt);
            }
        });

        jLabel9.setText("%");

        jLabel10.setText("Salary");

        basicSalaryField.setEditable(false);
        basicSalaryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicSalaryFieldActionPerformed(evt);
            }
        });

        jLabel11.setText("Leaves price");

        leavesPriceField.setEditable(false);

        jLabel12.setText("Total");

        totalPriceField.setEditable(false);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        salaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "date", "salary", "employee_id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(salaryTable);

        jLabel4.setText("Bonus");

        bonusField.setText("0");
        bonusField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bonusFieldActionPerformed(evt);
            }
        });
        bonusField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bonusFieldKeyReleased(evt);
            }
        });

        jLabel5.setText("Allowed Leaves Count");

        allowedLeavesCountLabel.setText("0");

        jButton1.setText("Select Employee");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(41, 41, 41)
                                .addComponent(employeeIdLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(employeeNameLabel))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(18, 18, 18)
                                            .addComponent(monthsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(leavesCountValueLabel)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(precentageField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9)))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(44, 44, 44)
                                                .addComponent(basicSalaryField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel12)
                                                    .addComponent(jLabel11))
                                                .addGap(12, 12, 12)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(leavesPriceField)
                                                    .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(41, 41, 41)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(bonusField))))
                                    .addComponent(allowedLeavesCountLabel))))
                        .addGap(0, 560, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(allowedLeavesCountLabel)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(monthsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(employeeNameLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(leavesCountValueLabel)
                            .addComponent(jLabel10)
                            .addComponent(basicSalaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(precentageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11)
                                    .addComponent(leavesPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(bonusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(employeeIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (!employeeIdLabel.getText().equals("ID value label")) {
            String employeeId = employeeIdLabel.getText();
            if (isThisEmployeeAlreadyInSalaryTable(employeeId)) {
                JOptionPane.showMessageDialog(null, "Employee Already in the salary table");
            } else {

                String today = TimestampsGenerator.getTodayDate();
                Double salary = Double.parseDouble(totalPriceField.getText());

                SalaryModel salaryModel = new SalaryModel();
                salaryModel.setEmployeeId(employeeId);
                salaryModel.setDate(today);
                salaryModel.setSalary(salary);

                try {
                    new EmployeeSalaryController().store(salaryModel);
                    JOptionPane.showMessageDialog(null, "Saved Successfull");
                    loadSalaryTable();
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.severe("Error while adding employee Salary : " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select a Employee First !");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private boolean isThisEmployeeAlreadyInSalaryTable(String employeeId) {

        String startMonth = getStartMonth();
        String finishMonth = getFinishMonth();

        try (ResultSet resultSet = new EmployeeSalaryController().showByMonthRange(startMonth, finishMonth)) {
            while (resultSet.next()) {
                if (employeeId.equals(resultSet.getString("employee_id"))) {
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while showing employee salary : " + e.getMessage());
        }
        return false;
    }

    private void basicSalaryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicSalaryFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_basicSalaryFieldActionPerformed

    public void setEmployeeData(String employeeId) {
        try (ResultSet resultSet = new EmployeeController().show(employeeId)) {
            if (resultSet.next()) {
                employeeNameLabel.setText(resultSet.getString("first_name"));
                employeeIdLabel.setText(employeeId);

                // leaves count process
                loadBasicSalary(resultSet.getInt("employee_type_id"));
                int leavesForMonth = getLeavesForMonth(resultSet.getInt("employee_type_id"));
                if (leavesForMonth != 0) {
                    int leavesCount = getLeavesCount(employeeId);
                    int finalLeavesCount = leavesForMonth - leavesCount;
                    if (finalLeavesCount < 0) {
                        leavesCountValueLabel.setText(String.valueOf(finalLeavesCount * -1));
                    } else {
                        leavesCountValueLabel.setText("0");
                    }
                    precentageField.setText("0");
                    loadPresentageSalary();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while setting employee : " + e.getMessage());
        }
    }

    private void loadBasicSalary(int typeId) {
        try (ResultSet resultSet = new EmployeeTypeController().show(typeId)) {
            if (resultSet.next()) {
                allowedLeavesCountLabel.setText(resultSet.getString("leaves_for_month"));
                basicSalaryField.setText(resultSet.getString("basic_salary"));
            } else {
                allowedLeavesCountLabel.setText("0");
                basicSalaryField.setText("0");
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loading employee basic Salary : " + e.getMessage());
        }
    }

    private int getLeavesForMonth(int typeId) {
        try (ResultSet resultSet = new EmployeeTypeController().show(typeId)) {
            if (resultSet.next()) {
                return resultSet.getInt("leaves_for_month");
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loading employee type leaves : " + e.getMessage());
        }
        return 0;
    }

    private int getLeavesCount(String employeeId) {
        int leavesCount = 0;
        try (ResultSet resultSet = new AttendanceDateController().showByMonthRange(getStartMonth(), getFinishMonth())) {
            while (resultSet.next()) {
                if (isEmployeeAbsent(employeeId, resultSet.getInt("id"))) {
                    leavesCount = leavesCount + 1;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while getting leaves count : " + e.getMessage());
        }
        return leavesCount;
    }

    private boolean isEmployeeAbsent(String employeeId, int dateId) {
        try (ResultSet resultSet = new EmployeeAttendanceController().showByDateAndStatus(employeeId, dateId, 2)) {
            if (resultSet.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while getting employee attendance status : " + e.getMessage());
        }
        return false;
    }

    private void monthsComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthsComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_monthsComboBoxMouseClicked

    private void monthsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthsComboBoxActionPerformed
        // TODO add your handling code here:
        loadSalaryTable();
//        setEmployeeData();
    }//GEN-LAST:event_monthsComboBoxActionPerformed

    private void precentageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precentageFieldKeyReleased
        // TODO add your handling code here:
        if (!employeeIdLabel.getText().equals("ID value label")) {
            loadPresentageSalary();
        } else {
            precentageField.setText("0");
            JOptionPane.showMessageDialog(null, "Please select a employee first");
        }
    }//GEN-LAST:event_precentageFieldKeyReleased

    private void bonusFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bonusFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bonusFieldActionPerformed

    private void bonusFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bonusFieldKeyReleased
        // TODO add your handling code here:
        if (!employeeIdLabel.getText().equals("ID value label")) {
            loadPresentageSalary();
        } else {
            bonusField.setText("0");
            JOptionPane.showMessageDialog(null, "Please select a employee first");
        }
    }//GEN-LAST:event_bonusFieldKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new EmployeeSelectorDialog(null, true, employeeSalaryPanel).setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadPresentageSalary() {
        Double basicSalary = Double.parseDouble(basicSalaryField.getText());
        int leaves = Integer.parseInt(leavesCountValueLabel.getText());
        Double presentage = 0.0;
        if (!precentageField.getText().isEmpty()) {
            presentage = Double.parseDouble(precentageField.getText());

        }
        Double leaveSalary = (basicSalary * presentage) / 100;
        leavesPriceField.setText(String.valueOf(leaves * leaveSalary));

        loadTotalSalary();
    }

    private void loadTotalSalary() {
        Double basicSalary = Double.parseDouble(basicSalaryField.getText());
        Double leavesPrice = Double.parseDouble(leavesPriceField.getText());

        Double bonus = 0.0;
        if (!bonusField.getText().isEmpty()) {
            bonus = Double.parseDouble(bonusField.getText());
        }

        Double totalPrice = (basicSalary - leavesPrice) + bonus;

        totalPriceField.setText(String.valueOf(totalPrice));
    }

    private String getStartMonth() {
        String month = String.valueOf(monthsComboBox.getSelectedItem());
        return "2024-" + Integer.valueOf(monthHashMap.get(month)) + "-1";
    }

    private String getFinishMonth() {
        String month = String.valueOf(monthsComboBox.getSelectedItem());
        int monthNumber = Integer.valueOf(monthHashMap.get(month));
        int lastMonthNumber = monthNumber + 1;
        String finishMonth = "2024-" + lastMonthNumber + "-1";
        if (monthNumber == 12) {
            finishMonth = "2024-12-31";
        }
        return finishMonth;
    }

    private void loadSalaryTable() {
        String startMonth = getStartMonth();
        String finishMonth = getFinishMonth();

        try (ResultSet resultSet = new EmployeeSalaryController().showByMonthRange(startMonth, finishMonth)) {
            DefaultTableModel tableModel = (DefaultTableModel) salaryTable.getModel();
            tableModel.setRowCount(0);
            while (resultSet.next()) {
                Vector vector = new Vector();
                vector.add(resultSet.getInt("id"));
                vector.add(resultSet.getString("date"));
                vector.add(resultSet.getString("salary"));
                vector.add(resultSet.getString("employee_id"));
                tableModel.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loading employee Salary : " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel allowedLeavesCountLabel;
    private javax.swing.JTextField basicSalaryField;
    private javax.swing.JTextField bonusField;
    private javax.swing.JLabel employeeIdLabel;
    private javax.swing.JLabel employeeNameLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel leavesCountValueLabel;
    private javax.swing.JTextField leavesPriceField;
    private javax.swing.JComboBox<String> monthsComboBox;
    private javax.swing.JTextField precentageField;
    private javax.swing.JTable salaryTable;
    private javax.swing.JTextField totalPriceField;
    // End of variables declaration//GEN-END:variables
}
