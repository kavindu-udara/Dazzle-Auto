/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views.financeAndHr;

import controllers.AttendanceDateController;
import controllers.EmployeeAttendanceController;
import controllers.EmployeeController;
import controllers.EmployeeSalaryController;
import controllers.EmployeeTypeController;
import controllers.MonthsController;
import includes.LoggerConfig;
import includes.OnlyDoubleDocumentFilter;
import includes.TimestampsGenerator;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.InputStream;
import javax.swing.table.DefaultTableModel;

import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.text.AbstractDocument;
import models.LoginModel;
import models.SalaryModel;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author kavindu
 */
public class EmployeeSalaryPanel extends javax.swing.JPanel {
    
    private static final HashMap<String, String> monthHashMap = new HashMap<>();
    private static final Logger logger = LoggerConfig.getLogger();
    
    private EmployeeSalaryPanel employeeSalaryPanel = this;
    
    private HashMap<String, String> monthsHashMap = new HashMap<>();

    /**
     * Creates new form EmployeeSalaryPanel
     */
    public EmployeeSalaryPanel() {
        initComponents();
        setDocumentFilters();
        loadMonths();
        loadSalaryTable();
        salaryTableRender();
        employeeIdLabel.setVisible(false);
    }
    
    private void setDocumentFilters() {
        ((AbstractDocument) precentageField.getDocument()).setDocumentFilter(new OnlyDoubleDocumentFilter());
        ((AbstractDocument) bonusField.getDocument()).setDocumentFilter(new OnlyDoubleDocumentFilter());
    }
    
    private void loadMonths() {
        try (ResultSet monthsResultSet = new MonthsController().show()) {
            Vector vector = new Vector();
            String todayMonth = "January";
            while (monthsResultSet.next()) {
                String month = monthsResultSet.getString("name");
                monthHashMap.put(month, monthsResultSet.getString("id"));
                vector.add(month);
            }
            DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel(vector);
            monthsComboBox.setModel(comboBoxModel);
            monthsComboBox.setSelectedItem(todayMonth);
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while load months : " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        monthsComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        leavesCountValueLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        precentageField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        basicSalaryField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        leavesPriceField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        totalPriceField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        salaryTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        bonusField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        allowedLeavesCountLabel = new javax.swing.JLabel();
        ClearAllBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        employeeNameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        employeeIdLabel = new javax.swing.JLabel();
        employeeTypeLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        regDate = new javax.swing.JLabel();
        viewReportb = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel1.setText("Select a month : ");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 132, -1, 30));

        monthsComboBox.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        monthsComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthsComboBoxMouseClicked(evt);
            }
        });
        monthsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsComboBoxActionPerformed(evt);
            }
        });
        add(monthsComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 160, 120, 30));

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel6.setText("Leaves Taken : ");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        leavesCountValueLabel.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        leavesCountValueLabel.setText("0");
        add(leavesCountValueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, -1, -1));

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel8.setText("Precentage");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        precentageField.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        precentageField.setText("0");
        precentageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                precentageFieldKeyReleased(evt);
            }
        });
        add(precentageField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 57, -1));

        jLabel9.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel9.setText("%");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, -1, -1));

        jLabel10.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel10.setText("Salary :");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, -1, -1));

        basicSalaryField.setEditable(false);
        basicSalaryField.setFont(new java.awt.Font("Roboto", 3, 18)); // NOI18N
        basicSalaryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicSalaryFieldActionPerformed(evt);
            }
        });
        add(basicSalaryField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 150, 30));

        jLabel11.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel11.setText("Cut For Leaves :");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, -1, -1));

        leavesPriceField.setEditable(false);
        leavesPriceField.setFont(new java.awt.Font("Roboto", 3, 18)); // NOI18N
        leavesPriceField.setText("0");
        add(leavesPriceField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 120, 150, 30));

        jLabel12.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel12.setText("Final Salary ");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 80, 120, 30));

        totalPriceField.setEditable(false);
        totalPriceField.setFont(new java.awt.Font("Roboto", 3, 18)); // NOI18N
        totalPriceField.setForeground(new java.awt.Color(255, 153, 0));
        add(totalPriceField, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 110, 230, 30));

        addButton.setBackground(new java.awt.Color(33, 43, 108));
        addButton.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("ADD");
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 150, 110, 40));

        salaryTable.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        salaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Payed Date", "Salary", "Employee ID", "Employee Type", "Month"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salaryTable.setFocusable(false);
        salaryTable.setRowHeight(25);
        jScrollPane1.setViewportView(salaryTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 208, 1070, 300));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel4.setText("Bonus :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, -1, -1));

        bonusField.setFont(new java.awt.Font("Roboto", 3, 18)); // NOI18N
        bonusField.setText("0");
        bonusField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bonusFieldActionPerformed(evt);
            }
        });
        bonusField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bonusFieldKeyReleased(evt);
            }
        });
        add(bonusField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 160, 150, 30));

        jLabel5.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel5.setText("Allowed Leaves Count :");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 200, -1));

        allowedLeavesCountLabel.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        allowedLeavesCountLabel.setText("0");
        add(allowedLeavesCountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 90, 20, -1));

        ClearAllBtn.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        ClearAllBtn.setForeground(new java.awt.Color(255, 0, 0));
        ClearAllBtn.setText("CLEAR ALL");
        ClearAllBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        ClearAllBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ClearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllBtnActionPerformed(evt);
            }
        });
        add(ClearAllBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 150, 110, 40));

        jPanel1.setBackground(new java.awt.Color(252, 235, 202));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 153, 0));
        jButton1.setText("Select Employee");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 1, true));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 10, 180, 40));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel3.setText("Employee name :");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        employeeNameLabel.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        employeeNameLabel.setForeground(new java.awt.Color(0, 0, 204));
        employeeNameLabel.setText("Name value label");
        jPanel1.add(employeeNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel2.setText("Reg. Date:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 20, -1, -1));

        employeeIdLabel.setFont(new java.awt.Font("Roboto", 0, 8)); // NOI18N
        employeeIdLabel.setForeground(new java.awt.Color(0, 0, 204));
        employeeIdLabel.setText("ID value label");
        jPanel1.add(employeeIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 10));

        employeeTypeLabel.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        employeeTypeLabel.setForeground(new java.awt.Color(0, 0, 204));
        employeeTypeLabel.setText("Employee Type");
        jPanel1.add(employeeTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 20, -1, -1));

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel7.setText("Employee Type :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, -1, -1));

        regDate.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        regDate.setForeground(new java.awt.Color(0, 0, 153));
        regDate.setText("Date");
        jPanel1.add(regDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 16, 120, 30));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1120, 60));

        viewReportb.setBackground(new java.awt.Color(51, 51, 51));
        viewReportb.setFont(new java.awt.Font("Courier New", 1, 20)); // NOI18N
        viewReportb.setForeground(new java.awt.Color(255, 255, 255));
        viewReportb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/btn_icons/analyze-30.png"))); // NOI18N
        viewReportb.setText(" Save Report");
        viewReportb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewReportb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewReportbActionPerformed(evt);
            }
        });
        add(viewReportb, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 510, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void salaryTableRender() {
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        
        JTableHeader tableHeader = salaryTable.getTableHeader();
        
        tableHeader.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Font headerFont = new Font("Verdana", Font.BOLD, 14);
                label.setBorder(BorderFactory.createEmptyBorder()); // Remove header borders
                label.setFont(headerFont);
                label.setBackground(new Color(33, 43, 108)); // Optional: Set header background color
                label.setForeground(Color.WHITE); // Optional: Set header text color
                label.setHorizontalAlignment(SwingConstants.CENTER); // Center the text
                return label;
            }
        });
        
        tableHeader.setPreferredSize(new Dimension(tableHeader.getPreferredSize().width, 30));
        
        for (int i = 0; i < 6; i++) {
            salaryTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String today = TimestampsGenerator.getTodayDate();
        if (!employeeIdLabel.getText().equals("ID value label")) {
            String employeeId = employeeIdLabel.getText();
            if (isThisEmployeeAlreadyInSalaryTable(employeeId, today, Integer.parseInt(monthHashMap.get(monthsComboBox.getSelectedItem())))) {
                JOptionPane.showMessageDialog(null, "Employee Already in the salary table");
            } else {
                
                Double salary = Double.parseDouble(totalPriceField.getText());
                
                SalaryModel salaryModel = new SalaryModel();
                salaryModel.setEmployeeId(employeeId);
                salaryModel.setDate(today);
                salaryModel.setSalary(salary);
                
                String monthId = String.valueOf(monthHashMap.get(String.valueOf(monthsComboBox.getSelectedItem())));
                
                salaryModel.setMonthId(Integer.parseInt(monthId));
                
                try {
                    new EmployeeSalaryController().store(salaryModel);
                    JOptionPane.showMessageDialog(null, "Saved Successfull");
                    loadSalaryTable();

                    //Payslip print
                    try {
                        String dateTime = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss aa").format(new Date());
                        String imgPath = "";
                        //View or print grn
                        InputStream s = this.getClass().getResourceAsStream("/resources/reports/PaySlip.jasper");
                        String img = new File(this.getClass().getResource("/resources/reports/dazzle_auto_tp.png").getFile()).getAbsolutePath();
                        imgPath = img.replace("\\", "/");
                        
                        HashMap<String, Object> params = new HashMap<>();
                        params.put("img", imgPath);                        
                        params.put("employeeName", employeeNameLabel.getText());
                        params.put("type", employeeTypeLabel.getText());
                        params.put("joinedDate", regDate.getText());
                        params.put("payedDate", dateTime);
                        params.put("salaryMonth", String.valueOf(monthsComboBox.getSelectedItem()));
                        params.put("workedDays", String.valueOf(30 - Integer.parseInt(leavesCountValueLabel.getText())));
                        
                        params.put("basic", String.valueOf(basicSalaryField.getText()));
                        params.put("bonus", bonusField.getText());
                        params.put("ot", "0");
                        params.put("totalEarnings", String.valueOf(Double.parseDouble(totalPriceField.getText()) + Double.parseDouble(leavesPriceField.getText())));
                        
                        params.put("leavesCut", leavesPriceField.getText());
                        params.put("tax", "0");
                        params.put("other", "0");
                        params.put("totalDeductions", leavesPriceField.getText());
                        params.put("netTotal", totalPriceField.getText());
                        
                        JREmptyDataSource dataSource = new JREmptyDataSource();
                        
                        JasperPrint report = JasperFillManager.fillReport(s, params, dataSource);
                        JasperViewer.viewReport(report, false);
                    } catch (Exception e) {
                        e.printStackTrace();
                        logger.severe("Error while payslip printing : " + e.getMessage());
                    }
                    
                } catch (Exception e) {
                    e.printStackTrace();
                    logger.severe("Error while adding employee Salary : " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select a Employee First !");
        }
    }//GEN-LAST:event_addButtonActionPerformed
    
    private boolean isThisEmployeeAlreadyInSalaryTable(String employeeId, String day, int monthId) {
        
        String startMonth = getStartMonth();
        String finishMonth = getFinishMonth();
        
        String year = day.split("-")[0];
        
        try (ResultSet resultSet = new EmployeeSalaryController().showBydateYearAndMonthId(employeeId, year, monthId)) {
            if (resultSet.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while showing employee salary : " + e.getMessage());
        }
        return false;
    }

    private void basicSalaryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicSalaryFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_basicSalaryFieldActionPerformed
    
    public void setEmployeeData(String employeeId) {
        try (ResultSet resultSet = new EmployeeController().show(employeeId)) {
            if (resultSet.next()) {
                employeeNameLabel.setText(resultSet.getString("first_name") + " " + resultSet.getString("last_name"));
                regDate.setText(resultSet.getString("registered_date").split(" ")[0]);
                employeeIdLabel.setText(employeeId);

                // leaves count process
                loadBasicSalary(resultSet.getInt("employee_type_id"));
                int leavesForMonth = getLeavesForMonth(resultSet.getInt("employee_type_id"));
                if (leavesForMonth != 0) {
                    int leavesCount = getLeavesCount(employeeId);
                    int finalLeavesCount = leavesForMonth - leavesCount;
                    if (finalLeavesCount < 0) {
                        leavesCountValueLabel.setText(String.valueOf(finalLeavesCount * -1));
                    } else {
                        leavesCountValueLabel.setText("0");
                    }
                    precentageField.setText("0");
                    loadPresentageSalary();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while setting employee : " + e.getMessage());
        }
    }
    
    private void loadBasicSalary(int typeId) {
        try (ResultSet resultSet = new EmployeeTypeController().show(typeId)) {
            if (resultSet.next()) {
                allowedLeavesCountLabel.setText(resultSet.getString("leaves_for_month"));
                basicSalaryField.setText(resultSet.getString("basic_salary"));
                employeeTypeLabel.setText(resultSet.getString("type"));
            } else {
                allowedLeavesCountLabel.setText("0");
                basicSalaryField.setText("0");
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loading employee basic Salary : " + e.getMessage());
        }
    }
    
    private int getLeavesForMonth(int typeId) {
        try (ResultSet resultSet = new EmployeeTypeController().show(typeId)) {
            if (resultSet.next()) {
                return resultSet.getInt("leaves_for_month");
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loading employee type leaves : " + e.getMessage());
        }
        return 0;
    }
    
    private int getLeavesCount(String employeeId) {
        int leavesCount = 0;
        try (ResultSet resultSet = new AttendanceDateController().showByMonthRange(getStartMonth(), getFinishMonth())) {
            while (resultSet.next()) {
                if (isEmployeeAbsent(employeeId, resultSet.getInt("id"))) {
                    leavesCount = leavesCount + 1;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while getting leaves count : " + e.getMessage());
        }
        return leavesCount;
    }
    
    private boolean isEmployeeAbsent(String employeeId, int dateId) {
        try (ResultSet resultSet = new EmployeeAttendanceController().showByDateAndStatus(employeeId, dateId, 2)) {
            if (resultSet.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while getting employee attendance status : " + e.getMessage());
        }
        return false;
    }

    private void monthsComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthsComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_monthsComboBoxMouseClicked

    private void monthsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthsComboBoxActionPerformed
        // TODO add your handling code here:
        loadSalaryTable();
//        setEmployeeData();
    }//GEN-LAST:event_monthsComboBoxActionPerformed

    private void precentageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precentageFieldKeyReleased
        // TODO add your handling code here:
        if (!employeeIdLabel.getText().equals("ID value label")) {
            loadPresentageSalary();
        } else {
            precentageField.setText("0");
            JOptionPane.showMessageDialog(null, "Please select a employee first");
        }
    }//GEN-LAST:event_precentageFieldKeyReleased

    private void bonusFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bonusFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bonusFieldActionPerformed

    private void bonusFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bonusFieldKeyReleased
        // TODO add your handling code here:
        if (!employeeIdLabel.getText().equals("ID value label")) {
            loadPresentageSalary();
        } else {
            bonusField.setText("0");
            JOptionPane.showMessageDialog(null, "Please select a employee first");
        }
    }//GEN-LAST:event_bonusFieldKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new EmployeeSelectorDialog(null, true, employeeSalaryPanel, "Salary", () -> {
        }).setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ClearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllBtnActionPerformed
        // TODO add your handling code here:
        bonusField.setText("0");
        precentageField.setText("0");
        basicSalaryField.setText("0");
        employeeNameLabel.setText("Name value label");
        employeeIdLabel.setText("ID value label");
        employeeTypeLabel.setText("Employee Type");
        allowedLeavesCountLabel.setText("0");
        leavesCountValueLabel.setText("0");
        loadPresentageSalary();
    }//GEN-LAST:event_ClearAllBtnActionPerformed

    public JasperPrint makeReport() {

        String dateTime = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss aa").format(new Date());

        String headerImg;
        try {
            InputStream s = this.getClass().getResourceAsStream("/resources/reports/EmpolyeeSalaryReport.jasper");
            String img = new File(this.getClass().getResource("/resources/reports/dazzle_auto_tp.png").getFile()).getAbsolutePath();

            headerImg = img.replace("\\", "/");

            HashMap<String, Object> params = new HashMap<>();
            params.put("img", headerImg);
            params.put("employee", LoginModel.getFirstName() + " " + LoginModel.getLastName());
            params.put("reportDate", dateTime);
            params.put("months", String.valueOf(monthsComboBox.getSelectedItem()));


            JRTableModelDataSource dataSource = new JRTableModelDataSource(salaryTable.getModel());

            JasperPrint report = JasperFillManager.fillReport(s, params, dataSource);

            return report;

        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while makeReport() : " + e.getMessage());
        }
        return null;
    }
    private void viewReportbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewReportbActionPerformed

        try {
            JasperPrint report = makeReport();
            JasperViewer.viewReport(report, false);

            logger.info("Product Report Viewed By : " + LoginModel.getEmployeeId());
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while viewReportbActionPerformed : " + e.getMessage());
        }
    }//GEN-LAST:event_viewReportbActionPerformed
    
    private void loadPresentageSalary() {
        if (Integer.parseInt(leavesCountValueLabel.getText()) > Integer.parseInt(allowedLeavesCountLabel.getText())) {
            
            Double basicSalary = Double.parseDouble(basicSalaryField.getText());
            int leaves = Integer.parseInt(leavesCountValueLabel.getText());
            Double presentage = 0.0;
            if (!precentageField.getText().isEmpty()) {
                presentage = Double.parseDouble(precentageField.getText());
            }
            Double leaveSalary = (basicSalary * presentage) / 100;
            leavesPriceField.setText(String.valueOf(leaves * leaveSalary));
            
        }
        loadTotalSalary();
    }
    
    private void loadTotalSalary() {
        Double basicSalary = Double.parseDouble(basicSalaryField.getText());
        Double leavesPrice = Double.parseDouble(leavesPriceField.getText());
        
        Double bonus = 0.0;
        if (!bonusField.getText().isEmpty()) {
            bonus = Double.parseDouble(bonusField.getText());
        }
        
        Double totalPrice = (basicSalary - leavesPrice) + bonus;
        
        totalPriceField.setText(String.valueOf(totalPrice));
    }
    
    private String getStartMonth() {
        String month = String.valueOf(monthsComboBox.getSelectedItem());
        return "2024-" + Integer.valueOf(monthHashMap.get(month)) + "-1";
    }
    
    private String getFinishMonth() {
        String month = String.valueOf(monthsComboBox.getSelectedItem());
        int monthNumber = Integer.valueOf(monthHashMap.get(month));
        int lastMonthNumber = monthNumber + 1;
        String finishMonth = "2024-" + lastMonthNumber + "-1";
        if (monthNumber == 12) {
            finishMonth = "2024-12-31";
        }
        return finishMonth;
    }
    
    private void loadSalaryTable() {
        
        try (ResultSet resultSet = new EmployeeSalaryController().showByMonthId(Integer.parseInt(monthHashMap.get(String.valueOf(monthsComboBox.getSelectedItem()))))) {
            DefaultTableModel tableModel = (DefaultTableModel) salaryTable.getModel();
            tableModel.setRowCount(0);
            while (resultSet.next()) {
                
                Vector vector = new Vector();
                ResultSet employeeResultSet = new EmployeeController().show(resultSet.getString("employee_id"));
                
                if (employeeResultSet.next()) {
                    vector.add(employeeResultSet.getString("first_name") + " " + employeeResultSet.getString("last_name"));
                } else {
                    vector.add("-");
                }
                
                vector.add(resultSet.getString("date"));
                vector.add(resultSet.getString("salary"));
                vector.add(resultSet.getString("employee_id"));
                
                ResultSet employeeTypeResultSet = new EmployeeTypeController().show(employeeResultSet.getInt("employee_type_id"));
                if (employeeTypeResultSet.next()) {
                    vector.add(employeeTypeResultSet.getString("type"));
                } else {
                    vector.add("-");
                }
                
                ResultSet salaryMonthResultSet = new MonthsController().show(resultSet.getInt("months_id"));
                if (salaryMonthResultSet.next()) {
                    vector.add(salaryMonthResultSet.getString("name"));
                } else {
                    vector.add("-");
                }
                
                tableModel.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error while loading employee Salary : " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearAllBtn;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel allowedLeavesCountLabel;
    private javax.swing.JTextField basicSalaryField;
    private javax.swing.JTextField bonusField;
    private javax.swing.JLabel employeeIdLabel;
    private javax.swing.JLabel employeeNameLabel;
    private javax.swing.JLabel employeeTypeLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel leavesCountValueLabel;
    private javax.swing.JTextField leavesPriceField;
    private javax.swing.JComboBox<String> monthsComboBox;
    private javax.swing.JTextField precentageField;
    private javax.swing.JLabel regDate;
    private javax.swing.JTable salaryTable;
    private javax.swing.JTextField totalPriceField;
    private javax.swing.JButton viewReportb;
    // End of variables declaration//GEN-END:variables
}
